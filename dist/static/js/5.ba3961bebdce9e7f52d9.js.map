{"version":3,"sources":["webpack:///static/js/5.ba3961bebdce9e7f52d9.js","webpack:///./src/components/News/NewsDetail.vue","webpack:///./~/marked/lib/marked.js?bdc8*","webpack:///NewsDetail.vue","webpack:///./src/components/News/NewsDetail.vue?cf33","webpack:///./src/components/News/NewsDetail.vue?c124","webpack:///./src/components/News/NewsDetail.vue?4a84"],"names":["webpackJsonp","106","module","exports","__webpack_require__","Component","231","global","root","Lexer","options","this","tokens","links","marked","defaults","rules","block","normal","pedantic","gfm","tables","InlineLexer","inline","renderer","Renderer","Error","breaks","TextRenderer","Parser","token","escape","html","encode","replace","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","edit","regex","opt","source","name","val","getRegex","RegExp","resolveUrl","base","href","baseUrls","test","slice","noop","merge","obj","target","key","i","arguments","length","Object","prototype","hasOwnProperty","call","splitCells","tableRow","count","cells","split","splice","push","src","callback","toString","pending","highlight","lex","e","done","err","out","parse","type","text","lang","code","escaped","message","silent","newline","fences","hr","heading","nptable","blockquote","list","def","table","lheading","paragraph","_label","_title","bullet","item","_tag","_comment","top","next","loose","cap","bull","b","space","tag","l","isordered","istask","ischecked","exec","depth","header","align","ordered","start","match","indexOf","smartLists","join","undefined","task","checked","sanitize","pre","sanitizer","title","charCodeAt","autolink","url","link","reflink","nolink","strong","em","br","del","_escapes","_scheme","_email","_attribute","_href","_backpedal","output","mangle","inLink","trim","outputLink","escapes","codespan","smartypants","image","ch","Math","random","langPrefix","quote","level","raw","headerIds","headerPrefix","xhtml","body","listitem","checkbox","tablerow","content","tablecell","flags","prot","decodeURIComponent","baseUrl","originIndependentUrl","encodeURI","inlineText","reverse","tok","pop","peek","parseText","row","cell","j","setOptions","getDefaults","parser","lexer","inlineLexer","window","247","__webpack_exports__","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0_axios__","__WEBPACK_IMPORTED_MODULE_0_axios___default","__WEBPACK_IMPORTED_MODULE_1_marked__","__WEBPACK_IMPORTED_MODULE_1_marked___default","data","md","news","mounted","id","$route","params","getDetail","methods","_this","a","get","then","res","datas","mdNewsList","mdNews","console","log","msg","265","version","sources","names","mappings","file","sourcesContent","sourceRoot","275","locals","285","render","_vm","_h","$createElement","_self","_c","staticClass","domProps","innerHTML","_s","staticRenderFns"],"mappings":"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","file":"static/js/5.ba3961bebdce9e7f52d9.js","sourcesContent":["webpackJsonp([5],{\n\n/***/ 106:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(275)\n\nvar Component = __webpack_require__(52)(\n  /* script */\n  __webpack_require__(247),\n  /* template */\n  __webpack_require__(285),\n  /* scopeId */\n  \"data-v-44549bab\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 231:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n;(function(root) {\n'use strict';\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n  nptable: noop,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = edit(block.item, 'gm')\n  .replace(/bull/g, block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block.paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', block.heading)\n  .replace('lheading', block.lheading)\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = edit(block.paragraph)\n  .replace('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  .getRegex();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,\n  table: /^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/\n});\n\n/**\n * Pedantic grammar\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.pedantic) {\n    this.rules = block.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top) {\n  src = src.replace(/^ +$/gm, '');\n  var next,\n      loose,\n      cap,\n      bull,\n      b,\n      item,\n      space,\n      i,\n      tag,\n      l,\n      isordered,\n      istask,\n      ischecked;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(item.cells[i], item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      isordered = bull.length > 1;\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: isordered,\n        start: isordered ? +bull : ''\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        // Check for task list items\n        istask = /^\\[[ xX]\\] /.test(item);\n        ischecked = undefined;\n        if (istask) {\n          ischecked = item[1] !== ' ';\n          item = item.replace(/^\\[[ xX]\\] +/, '');\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start',\n          task: istask,\n          checked: ischecked\n        });\n\n        // Recurse.\n        this.token(item, false);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      if (!this.tokens.links[tag]) {\n        this.tokens.links[tag] = {\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(\n            item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''),\n            item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noop,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n  nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n  strong: /^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)|^__([^\\s])__(?!_)|^\\*\\*([^\\s])\\*\\*(?!\\*)/,\n  em: /^_([^\\s][\\s\\S]*?[^\\s_])_(?!_)|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_)|^\\*([^\\s][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*][\\s\\S]*?[^\\s])\\*(?!\\*)|^_([^\\s_])_(?!_)|^\\*([^\\s*])\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`]?)\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/\n};\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', block._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/;\ninline._href = /\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f()\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/)\n    .replace('email', inline._email)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: edit(inline.text)\n    .replace(']|', '~]|')\n    .replace('|', '|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&\\'*+/=?^_`{\\\\|}~-]+@|')\n    .getRegex()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('{2,}', '*').getRegex()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = '',\n      link,\n      text,\n      href,\n      title,\n      cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(this.mangle(cap[1]));\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      cap[0] = this.rules._backpedal.exec(cap[0])[0];\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0]\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      href = cap[2];\n      if (this.options.pedantic) {\n        link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        } else {\n          title = '';\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n      out += this.outputLink(cap, {\n        href: InlineLexer.escapes(href),\n        title: InlineLexer.escapes(title)\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\nInlineLexer.escapes = function(text) {\n  return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n}\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = link.href,\n      title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = '',\n      l = text.length,\n      i = 0,\n      ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || marked.defaults;\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  if (this.options.headerIds) {\n    return '<h'\n      + level\n      + ' id=\"'\n      + this.options.headerPrefix\n      + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n      + '\">'\n      + text\n      + '</h'\n      + level\n      + '>\\n';\n  }\n  // ignore IDs\n  return '<h' + level + '>' + text + '</h' + level + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered, start) {\n  var type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n  return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.checkbox = function(checked) {\n  return '<input '\n    + (checked ? 'checked=\"\" ' : '')\n    + 'disabled=\"\" type=\"checkbox\"'\n    + (this.options.xhtml ? ' /' : '')\n    + '> ';\n}\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  if (body) body = '<tbody>' + body + '</tbody>';\n\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + body\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' align=\"' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return text;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return text;\n    }\n  }\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return text;\n  }\n  var out = '<a href=\"' + escape(href) + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\nfunction TextRenderer() {}\n\n// no need for block level renderers\n\nTextRenderer.prototype.strong =\nTextRenderer.prototype.em =\nTextRenderer.prototype.codespan =\nTextRenderer.prototype.del =\nTextRenderer.prototype.text = function (text) {\n  return text;\n}\n\nTextRenderer.prototype.link =\nTextRenderer.prototype.image = function(href, title, text) {\n  return '' + text;\n}\n\nTextRenderer.prototype.br = function() {\n  return '';\n}\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options) {\n  var parser = new Parser(options);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options);\n  // use an InlineLexer with a TextRenderer to extract pure text\n  this.inlineText = new InlineLexer(\n    src.links,\n    merge({}, this.options, {renderer: new TextRenderer()})\n  );\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        unescape(this.inlineText.output(this.token.text)));\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = '',\n          body = '',\n          i,\n          row,\n          cell,\n          j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      body = '';\n      var ordered = this.token.ordered,\n          start = this.token.start;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered, start);\n    }\n    case 'list_item_start': {\n      body = '';\n\n      if (this.token.task) {\n        body += this.renderer.checkbox(this.token.checked);\n      }\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      // TODO parse inline content if parameter markdown=1\n      return this.renderer.html(this.token.text);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  return {\n    replace: function(name, val) {\n      val = val.source || val;\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\n      regex = regex.replace(name, val);\n      return this;\n    },\n    getRegex: function() {\n      return new RegExp(regex, opt);\n    }\n  };\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = base.replace(/[^/]*$/, '');\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[\\s\\S]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar baseUrls = {};\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  var cells = tableRow.replace(/([^\\\\])\\|/g, '$1 |').split(/ +\\| */),\n      i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    cells[i] = cells[i].replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight,\n        tokens,\n        pending,\n        i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.getDefaults = function () {\n  return {\n    baseUrl: null,\n    breaks: false,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: new Renderer(),\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tables: true,\n    xhtml: false\n  };\n}\n\nmarked.defaults = marked.getDefaults();\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (true) {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  root.marked = marked;\n}\n})(this || (typeof window !== 'undefined' ? window : global));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))\n\n/***/ }),\n\n/***/ 247:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(91);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_marked__ = __webpack_require__(231);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_marked___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_marked__);\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    data: function data() {\n        return {\n            md: '',\n            news: ''\n        };\n    },\n    mounted: function mounted() {\n        var id = this.$route.params.id;\n        this.getDetail(id);\n    },\n\n    methods: {\n        getDetail: function getDetail(id) {\n            var _this = this;\n\n            var url = \"/api/getmdnews\";\n            __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get(url + '?id=' + id).then(function (res) {\n                return res.data;\n            }).then(function (data) {\n                if (data.code == 1 && data.datas) {\n                    _this.md = data.datas.mdNewsList[0];\n                    _this.news = __WEBPACK_IMPORTED_MODULE_1_marked___default()(data.datas.mdNewsList[0].mdNews, { sanitize: true });\n                } else {\n                    console.log(data.msg);\n                }\n            });\n        }\n    }\n});\n\n/***/ }),\n\n/***/ 265:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(223)(true);\n// imports\n\n\n// module\nexports.push([module.i, \".news-detail[data-v-44549bab]{width:1120px;margin:0 auto;min-height:800px;background:#fff;padding:50px}\", \"\", {\"version\":3,\"sources\":[\"/Users/gavin/Documents/best/icopro/src/components/News/NewsDetail.vue\"],\"names\":[],\"mappings\":\"AACA,8BACI,aAAc,AACd,cAAgB,AAChB,iBAAkB,AAClB,gBAAiB,AACjB,YAAc,CACjB\",\"file\":\"NewsDetail.vue\",\"sourcesContent\":[\"\\n.news-detail[data-v-44549bab]{\\n    width: 1120px;\\n    margin: 0  auto;\\n    min-height: 800px;\\n    background: #fff;\\n    padding: 50px;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 275:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(265);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(224)(\"1a3ee9d8\", content, true);\n\n/***/ }),\n\n/***/ 285:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"news-detail\",\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.news)\n    }\n  })\n},staticRenderFns: []}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/5.ba3961bebdce9e7f52d9.js","\n/* styles */\nrequire(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"id\\\":\\\"data-v-44549bab\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./NewsDetail.vue\")\n\nvar Component = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./NewsDetail.vue\"),\n  /* template */\n  require(\"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-44549bab\\\"}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./NewsDetail.vue\"),\n  /* scopeId */\n  \"data-v-44549bab\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/News/NewsDetail.vue\n// module id = 106\n// module chunks = 5","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n;(function(root) {\n'use strict';\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n  nptable: noop,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = edit(block.item, 'gm')\n  .replace(/bull/g, block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block.paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', block.heading)\n  .replace('lheading', block.lheading)\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = edit(block.paragraph)\n  .replace('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  .getRegex();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,\n  table: /^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/\n});\n\n/**\n * Pedantic grammar\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.pedantic) {\n    this.rules = block.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top) {\n  src = src.replace(/^ +$/gm, '');\n  var next,\n      loose,\n      cap,\n      bull,\n      b,\n      item,\n      space,\n      i,\n      tag,\n      l,\n      isordered,\n      istask,\n      ischecked;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(item.cells[i], item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      isordered = bull.length > 1;\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: isordered,\n        start: isordered ? +bull : ''\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        // Check for task list items\n        istask = /^\\[[ xX]\\] /.test(item);\n        ischecked = undefined;\n        if (istask) {\n          ischecked = item[1] !== ' ';\n          item = item.replace(/^\\[[ xX]\\] +/, '');\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start',\n          task: istask,\n          checked: ischecked\n        });\n\n        // Recurse.\n        this.token(item, false);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      if (!this.tokens.links[tag]) {\n        this.tokens.links[tag] = {\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(\n            item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''),\n            item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noop,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n  nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n  strong: /^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)|^__([^\\s])__(?!_)|^\\*\\*([^\\s])\\*\\*(?!\\*)/,\n  em: /^_([^\\s][\\s\\S]*?[^\\s_])_(?!_)|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_)|^\\*([^\\s][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*][\\s\\S]*?[^\\s])\\*(?!\\*)|^_([^\\s_])_(?!_)|^\\*([^\\s*])\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`]?)\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/\n};\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', block._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/;\ninline._href = /\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f()\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/)\n    .replace('email', inline._email)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: edit(inline.text)\n    .replace(']|', '~]|')\n    .replace('|', '|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&\\'*+/=?^_`{\\\\|}~-]+@|')\n    .getRegex()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('{2,}', '*').getRegex()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = '',\n      link,\n      text,\n      href,\n      title,\n      cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(this.mangle(cap[1]));\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      cap[0] = this.rules._backpedal.exec(cap[0])[0];\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0]\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      href = cap[2];\n      if (this.options.pedantic) {\n        link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        } else {\n          title = '';\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n      out += this.outputLink(cap, {\n        href: InlineLexer.escapes(href),\n        title: InlineLexer.escapes(title)\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\nInlineLexer.escapes = function(text) {\n  return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n}\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = link.href,\n      title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = '',\n      l = text.length,\n      i = 0,\n      ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || marked.defaults;\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  if (this.options.headerIds) {\n    return '<h'\n      + level\n      + ' id=\"'\n      + this.options.headerPrefix\n      + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n      + '\">'\n      + text\n      + '</h'\n      + level\n      + '>\\n';\n  }\n  // ignore IDs\n  return '<h' + level + '>' + text + '</h' + level + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered, start) {\n  var type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n  return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.checkbox = function(checked) {\n  return '<input '\n    + (checked ? 'checked=\"\" ' : '')\n    + 'disabled=\"\" type=\"checkbox\"'\n    + (this.options.xhtml ? ' /' : '')\n    + '> ';\n}\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  if (body) body = '<tbody>' + body + '</tbody>';\n\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + body\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' align=\"' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return text;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return text;\n    }\n  }\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return text;\n  }\n  var out = '<a href=\"' + escape(href) + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  if (this.options.baseUrl && !originIndependentUrl.test(href)) {\n    href = resolveUrl(this.options.baseUrl, href);\n  }\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\nfunction TextRenderer() {}\n\n// no need for block level renderers\n\nTextRenderer.prototype.strong =\nTextRenderer.prototype.em =\nTextRenderer.prototype.codespan =\nTextRenderer.prototype.del =\nTextRenderer.prototype.text = function (text) {\n  return text;\n}\n\nTextRenderer.prototype.link =\nTextRenderer.prototype.image = function(href, title, text) {\n  return '' + text;\n}\n\nTextRenderer.prototype.br = function() {\n  return '';\n}\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options) {\n  var parser = new Parser(options);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options);\n  // use an InlineLexer with a TextRenderer to extract pure text\n  this.inlineText = new InlineLexer(\n    src.links,\n    merge({}, this.options, {renderer: new TextRenderer()})\n  );\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        unescape(this.inlineText.output(this.token.text)));\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = '',\n          body = '',\n          i,\n          row,\n          cell,\n          j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      body = '';\n      var ordered = this.token.ordered,\n          start = this.token.start;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered, start);\n    }\n    case 'list_item_start': {\n      body = '';\n\n      if (this.token.task) {\n        body += this.renderer.checkbox(this.token.checked);\n      }\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      // TODO parse inline content if parameter markdown=1\n      return this.renderer.html(this.token.text);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  return {\n    replace: function(name, val) {\n      val = val.source || val;\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\n      regex = regex.replace(name, val);\n      return this;\n    },\n    getRegex: function() {\n      return new RegExp(regex, opt);\n    }\n  };\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = base.replace(/[^/]*$/, '');\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[\\s\\S]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar baseUrls = {};\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  var cells = tableRow.replace(/([^\\\\])\\|/g, '$1 |').split(/ +\\| */),\n      i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    cells[i] = cells[i].replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight,\n        tokens,\n        pending,\n        i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.getDefaults = function () {\n  return {\n    baseUrl: null,\n    breaks: false,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: new Renderer(),\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tables: true,\n    xhtml: false\n  };\n}\n\nmarked.defaults = marked.getDefaults();\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  root.marked = marked;\n}\n})(this || (typeof window !== 'undefined' ? window : global));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/marked/lib/marked.js\n// module id = 231\n// module chunks = 1 4 5","<template>\n    <div class=\"news-detail\" v-html=\"news\">\n    </div>\n</template>\n\n<script>\nimport Axios from 'axios';\nimport marked from 'marked';\n  export default {\n    data() {\n      return {\n          md:'',\n          news:''\n      }\n    },\n    mounted() {\n        let id = this.$route.params.id;\n        this.getDetail(id);\n    },\n    methods: {\n      getDetail(id) {\n          let url = \"/api/getmdnews\";\n          Axios.get(`${url}?id=${id}`)\n                .then(res=>res.data)\n                .then(data=>{\n                    if(data.code ==1&&data.datas){\n                        this.md = data.datas.mdNewsList[0];\n                        this.news = marked(data.datas.mdNewsList[0].mdNews, { sanitize: true })\n                    }else{\n                        console.log(data.msg)\n                    }\n                })\n      }\n    }\n  }\n</script>\n<style scoped>\n    .news-detail{\n        width: 1120px;\n        margin: 0  auto;\n        min-height: 800px;\n        background: #fff;\n        padding: 50px;\n    }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// NewsDetail.vue?40f809a8","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".news-detail[data-v-44549bab]{width:1120px;margin:0 auto;min-height:800px;background:#fff;padding:50px}\", \"\", {\"version\":3,\"sources\":[\"/Users/gavin/Documents/best/icopro/src/components/News/NewsDetail.vue\"],\"names\":[],\"mappings\":\"AACA,8BACI,aAAc,AACd,cAAgB,AAChB,iBAAkB,AAClB,gBAAiB,AACjB,YAAc,CACjB\",\"file\":\"NewsDetail.vue\",\"sourcesContent\":[\"\\n.news-detail[data-v-44549bab]{\\n    width: 1120px;\\n    margin: 0  auto;\\n    min-height: 800px;\\n    background: #fff;\\n    padding: 50px;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-44549bab\",\"scoped\":true,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/News/NewsDetail.vue\n// module id = 265\n// module chunks = 5","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"id\\\":\\\"data-v-44549bab\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./NewsDetail.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"1a3ee9d8\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-44549bab\",\"scoped\":true,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/News/NewsDetail.vue\n// module id = 275\n// module chunks = 5","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"news-detail\",\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.news)\n    }\n  })\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-44549bab\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/News/NewsDetail.vue\n// module id = 285\n// module chunks = 5"],"sourceRoot":""}